@page "/ResetPassword"
@inject NavigationManager Navigate;
@inject IUserManagerService _user;
@inject INotificationService _msg;
<Row Margin="Margin.Is2.OnY ">
    <Column ColumnSize="ColumnSize.Is3.OnDesktop">
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is8.OnTablet.Is12.OnMobile">
        <Card Margin="Margin.Is4.FromBottom" Style="border:none">
            <CardHeader>
                <CardTitle>Reset Password</CardTitle>
            </CardHeader>
            <CardBody>
                <Validations @ref="@validationsRef" Mode="ValidationMode.Manual" Model="@user" ValidateOnLoad="false">

                    <Fields>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <Validation>
                                <Field>
                                    <FieldLabel>Email address</FieldLabel>
                                    <TextEdit Placeholder="Enter email" @bind-Text="@user.Email">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>

                                </Field>
                            </Validation>
                        </FieldBody>
                        <FieldBody ColumnSize="ColumnSize.Is2">
                            <Field>
                                <FieldLabel>Send Code</FieldLabel>
                                <Button Color="Color.Primary" Clicked="sendmail"> Send Mail</Button>
                            </Field>
                        </FieldBody>
                    </Fields>

                    <Fields>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <Validation>
                                <Field>
                                    <FieldLabel>Rest Code</FieldLabel>
                                    <TextEdit Placeholder="Rest Code" @bind-Text="@user.ResetCode">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>

                                </Field>
                            </Validation>
                        </FieldBody>
                        <FieldBody ColumnSize="ColumnSize.Is2">
                            <Field>
                                <FieldLabel>Validate</FieldLabel>
                                <Button Clicked="Validate" Color="Color.Primary"> Validate</Button>
                            </Field>
                        </FieldBody>
                    </Fields>
                    <Fields>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <Validation>
                                <Field>
                                    <FieldLabel>Password</FieldLabel>
                                    <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@user.Password" KeyPress="@CalculatePasswordStrength">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                    <FieldHelp>Password strength: <Text TextColor="TextColor.Danger">@passwordMessage</Text></FieldHelp>
                                </Field>
                            </Validation>
                        </FieldBody>
                    </Fields>
                    <Fields>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <Validation>
                                <Field>
                                    <FieldLabel>Confirm Password</FieldLabel>
                                    <TextEdit Role="TextRole.Password" Placeholder="Confirm Password" @bind-Text="@user.ConfirmPassword">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>

                                </Field>
                            </Validation>
                        </FieldBody>
                    </Fields>

                    <Field>
                        <GoogleRecaptcha SuccessCallBack="SuccessCallBack"
                                         TimeOutCallBack="TimeOutCallBack"
                                         ServerValidationErrorCallBack="ServerSideValidationError"
                                         ServerSideValidationHandler="ServerSideValidationHandler">
                        </GoogleRecaptcha>
                    </Field>
                    <Button Color="Color.Primary" Clicked="Save" Disabled="@Disabled">Submit</Button>
                    <Field>
                        <Span>@LoginMesssage</Span>
                    </Field>
                </Validations>
            </CardBody>
        </Card>
    </Column>
</Row>
@code {
    private ResetViewModel user = new ResetViewModel();
    Validations? validationsRef;
    private bool Disabled = true;
    private string? errorMessage;
    private string? captchaResponse;

    private bool isvalid = false;
    private bool ResetValid = false;
    public string LoginMesssage { get; set; } = "";
    private string? SignUpMessage;
    private string passwordMessage = "weak";
    private string passwordColor = "white";
    DateTime? selectedDate;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();

    }
    void TimeOutCallBack(CaptchaTimeOutEventArgs e)
    {

        Disabled = true;
        Console.WriteLine($"Captcha Time Out with message {e.ErrorMessage}");
        errorMessage = $"Captcha Timeout: {e.ErrorMessage}";
    }

    void SuccessCallBack(CaptchaSuccessEventArgs e)
    {

        captchaResponse = e.CaptchaResponse;
        isvalid = true;
        if (isvalid || ResetValid)
            Disabled = false;
        base.StateHasChanged();
    }
    private void ServerSideValidationError(CaptchaServerSideValidationErrorEventArgs e)
    {
        Disabled = true;
        errorMessage = $"Captcha server side validation error: {e.ErrorMessage}";
    }
    private async Task<ServerSideCaptchaValidationResultModel> ServerSideValidationHandler(ServerSideCaptchaValidationRequestModel requestModel)
    {
        using var httpClient = new HttpClient();
        
        return new ServerSideCaptchaValidationResultModel(true, "Success");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

    }
    private async Task<bool> Save()
    {
        if (user.Password != user.ConfirmPassword)
            await _msg.Warning("Confirm password didn't match");
        LoginModel lm = new();
        lm.password = user.Password;
        lm.userName = user.Email;
        string st = await _user.changepassword(lm);

        //user.DOB = Convert.ToDateTime(selectedDate);
        //string output = await ia.Signup(user);
        //SignUpMessage = output.ToString();
        //if (SignUpMessage.ToLower() == "success")
        //    Navigate.NavigateTo("/Login");
        await _msg.Info(st);
        return await Task.FromResult(true);
    }
    private async Task CalculatePasswordStrength()
    {
        int score = 0;
        if (user.Password.Length < 1)
        {
            passwordColor = "white";
            passwordMessage = "";
            return;
        }
        if (user.Password.Length < 8)
        {
            passwordColor = "red";
            passwordMessage = "Weak";
            score = 1;
            return;
        }
        else if (user.Password.Length < 12)
            score = 2;
        else
            score = 3;

        if (user.Password.Any(char.IsDigit))
            score++;

        if (user.Password.Any(char.IsLower) && user.Password.Any(char.IsUpper))
            score++;

        if (user.Password.Any(ch => !char.IsLetterOrDigit(ch)))
            score++;

        if (user.Password.Distinct().Count() == user.Password.Length)
            score++;

        switch (score)
        {
            case 1:
                passwordColor = "red";
                passwordMessage = "Weakest";
                break;
            case 2:
                passwordColor = "orange";
                passwordMessage = "weak";
                break;
            case 3:
                passwordColor = "orange";
                passwordMessage = "Moderate";
                break;
            case 4:
                passwordColor = "yellow";
                passwordMessage = "Strong";
                break;
            case 5:
            case 6:
                passwordColor = "green";
                passwordMessage = "Very Strong";
                break;
            default:
                passwordColor = "white";
                passwordMessage = "";
                break;
        }
    }
    private async Task  Validate()
    {
        if (user.Email is null || user.Email == "" || !ValidationRule.IsEmail(user.Email))
        {
            await _msg.Error("Valid Email Required");
            return;
        }
        if (user.ResetCode is null || user.ResetCode == "" )
        {
            await _msg.Error("Valid Reset Code Required");
            return;
        }
        PasswordReset pwd = new();
        pwd.userID = user.Email; 
        pwd.ResetCode = user.ResetCode;
        ResetValid = await _user.RestCodeValid(pwd);
        if (isvalid && ResetValid)
            Disabled = false;

    }
    private async Task sendmail()
    {
        if (user.Email is null || user.Email == "" || !ValidationRule.IsEmail(user.Email))
        {
            await _msg.Error("Valid Email Required");
            return;
        }
        string st = await _user.Sendresetcode(user.Email);
        if (st != "Success")
        {

            await _msg.Error("Not Sent");
        }
        else
            await _msg.Success("Sent");
    }
}