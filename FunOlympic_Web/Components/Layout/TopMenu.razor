@using Blazored.SessionStorage;
@using Blazorise.Localization
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject IAuthenticationService _apiLogic
@inject ISessionStorageService _localStorage
@inject IUserManagerService _user

<Bar @bind-Visible="@topbarVisible" Breakpoint="Breakpoint.Desktop" Background="Background.Primary" ThemeContrast="ThemeContrast.Light">
    <BarBrand Padding="Padding.Is0">
        <BarItem>
            <BarLink To="/">
                <BarIcon IconName="customIcon" />
                Fun Olympic
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarLink To="/">Home</BarLink>
            </BarItem>
            <BarItem>
                <BarLink To="/Scores">Scores</BarLink>
            </BarItem>
            <BarItem>
                <BarLink To="/LiveGallery">Live</BarLink>
            </BarItem>
        </BarStart>
        <BarItem>
            <BarLink To="/Highlights">Highlights</BarLink>
        </BarItem>
        <BarEnd>
            <CascadingAuthenticationState>
             <AuthorizeView>
                <Authorized>
                <BarItem>
                        @context.User.Identity?.Name!
                </BarItem>
                 <BarDropdown Margin="Margin.Is5.FromEnd">
                    <BarDropdownToggle>
                                
                                            <BarIcon IconName="customIcon" />
                                  
                    </BarDropdownToggle>
                            <BarDropdownMenu Margin="Margin.Is5.FromEnd">
                                <BarDropdownItem Clicked="@ShowModal">
                        Change Password
                                </BarDropdownItem>
                                <BarDropdownItem @onclick="Logout">
                                Log out
                                </BarDropdownItem>
                                </BarDropdownMenu>
                    </BarDropdown>
                        
                   
                </Authorized>
                 <NotAuthorized>
                    <BarItem>
                        <BarLink To="/login">Login</BarLink>
                    </BarItem>
                        <BarItem>
                            <BarLink To="/SignUp">SignUp</BarLink>
                        </BarItem>
                    </NotAuthorized>
             </AuthorizeView>
             </CascadingAuthenticationState>
        </BarEnd>
    </BarMenu>
</Bar>
<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>User Name</FieldLabel>
                <TextEdit Placeholder="Enter name..."  @bind-Text="userName" Disabled/>
            </Field>
            <Field>
                <FieldLabel>Old Password</FieldLabel>
                <TextEdit Role="TextRole.Password" @bind-Text="opassword" Placeholder="Enter old Password..." />
            </Field>
            <Field>
                <FieldLabel>New Password</FieldLabel>
                <TextEdit Role="TextRole.Password"  @bind-Text="password" Placeholder="Enter new password..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@HideModal">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    private Modal modalRef;

    private async Task ShowModal()
    {
        var Email = await _localStorage.GetItemAsync<string>("Email");
        await  modalRef.Show();
        userName = Email;
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
    private Task savepassword()
    {
        LoginModel lm = new LoginModel();
        lm.password = password;
        lm.userName = userName;
        _user.changepassword(lm);
        return modalRef.Hide();
    }
    protected override async Task OnInitializedAsync()
    {
        await SelectCulture( "en-US" );

        await base.OnInitializedAsync();
    }
    private string userName;
    private string password;
    private string opassword;
    Task SelectCulture( string name )
    {
        LocalizationService!.ChangeLanguage( name );

        return Task.CompletedTask;
    }
    RenderFragment customIcon =@<img src="/img/icon.png" style="width:48px; height: 48px" />;
    private bool topbarVisible = false;
    private async Task Logout()
    {
        var response = await _apiLogic.Logout();
        if (response)
        {
            _navigationManager.NavigateTo("/", true);
        }

    }
    Task OnLayoutTypeChecked( string layoutType )
    {
        LayoutType = layoutType;

        return LayoutTypeChanged.InvokeAsync( layoutType );
    }

    [Parameter] public EventCallback<bool> ThemeEnabledChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeGradientChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeRoundedChanged { get; set; }

    [Parameter] public EventCallback<string> ThemeColorChanged { get; set; }

    [Parameter] public string? LayoutType { get; set; }

    [Parameter] public EventCallback<string> LayoutTypeChanged { get; set; }

    [Inject] protected ITextLocalizerService? LocalizationService { get; set; }

    [CascadingParameter] protected Theme? Theme { get; set; }
}